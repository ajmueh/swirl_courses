- Class: meta
  Course: Getting Started
  Lesson: Subsetting Vectors
  Author: Simon A. Queenborough and Andrew Muehleisen from code by Nick Carchedi
  Type: Standard
  Organization: Yale
  Version: 2.2.0

- Class: text
  Output: "# Subsetting and Indexing Vectors"

- Class: text
  Output: "First, remember that a vector is just a single sequence of data elements (e.g., the numbers 1 to 10).
          These data elements are all the same type (e.g., all numbers, or all integers, or all text). 
          The sequence can be of any length, even of length 1."


- Class: text
  Output: In this lesson, we'll see how to extract elements from a vector based on some conditions 
    that we specify. In other words, we want to select some of the numbers in a vector based either on 
    their position in the vector or the value that each number has.
    
- Class: text
  Output: For example, we may only be interested in the first 20 elements of a vector, or only the 
    elements that are not NA, or only those that are positive or correspond to a specific variable 
    of interest. By the end of this lesson, you'll know how to handle each of these scenarios.
    
- Class: text
  Output: "NAs are a special data type in R to signify missing values or entries. For example, 
  empty values in a spreadsheet are read as NA in R. They don't work like any other data type, and 
  should be worked around. We'll also teach you how to subset around NAs in this lesson. "

- Class: cmd_question
  Output: I've created for you a vector called `x` that contains a random ordering of 20 numbers 
    (from a standard normal distribution i.e., a bell curve) and 20 NAs. Type `x` now to see what it looks like.
  CorrectAnswer: x
  AnswerTests: omnitest(correctExpr='x')
  Hint: Type x to view its contents.

- Class: text
  Output: "## How to identify a specific location in a vector"

- Class: text
  Output: "Look carefully at `x` in your R console above. It has 40 'elements', or 
          pieces of data, in the vector. You can see the `NA`s and the numbers."
          
          
- Class: text
  Output: "You can also see some numbers in square brackets to the left of the screen. 
     The first one should be a 1: `[1]`. These numbers in square brackets tell us where 
     we are in the vector. `[1]` tells us that this is the first element, position 1
     in the vector."
     
- Class: text
  Output: "The next number vertically below the `[1]` tells us at which position the 
       vector starts on the new line. This may be `[6]`, `[7]`, `[8]`, depending on the width 
       of your console."
       
- Class: cmd_question
  Output: "Count along the vector. What is the value of the fourth element? Type it out in full."
  CorrectAnswer: -2.6151775
  AnswerTests: omnitest(correctExpr='-2.6151775')
  Hint: You can copy and paste from the console, or type out `-2.6151775`.

- Class: text
  Output: "## How to extract elements from a vector based on position"

- Class: cmd_question
  Output: "We can use this numbered or 'indexing' system in reverse to tell R what
     we want to look at. Type `x[4]`into your console."
  CorrectAnswer: x[4]
  AnswerTests: omnitest(correctExpr='x[4]')
  Hint: Type `x[4]`.

- Class: text
  Output: "We just told R to show us the fourth element of x."

- Class: text
  Output: So, the way to tell R that you want to select some particular elements (i.e., a 'subset') 
    from a vector is by placing an 'index' in square brackets immediately following the 
    name of the vector. This index tells R which locations in the vector to pull out.


- Class: cmd_question
  Output: For a simple example, try `x[1:10]` to view the first ten elements of `x`. (Remember that
       `:` is a neat way to generate a sequence of numbers!).
  CorrectAnswer: x[1:10]
  AnswerTests: omnitest(correctExpr='x[1:10]')
  Hint: View the first ten elements of x with x[1:10].

- Class: text
  Output: An index (*pl.* indices) comes in four different flavors---logical, 
     positive integers, negative integers, and character strings---each
     of which we'll cover in this lesson.
     
- Class: text
  Output: "Usually you will want to subset/index more than one value, and so
      you will use a vector of indices to index the (original) vector ... so to speak."

- Class: text
  Output: "## How to index with logical statements (and what are NAs?)"

- Class: text
  Output: "Let's start by indexing with logical vectors. One common scenario when working 
    with real-world data is that we want to extract all elements of a vector that are not 
    NA (i.e., missing data). Recall that `is.object_type` yields a true or false depending on the type 
    of object you're working with. In a similar vein, `is.data_type` does the same thing with data. For example, 
    `is.na(x)` yields a vector of logical values the same length as `x`, with TRUEs corresponding to 
    NA values in `x` and FALSEs corresponding to non-NA values in `x`."
    
- Class: cmd_question
  Output: Before we subset, let's see what see what this logical vector looks like. Enter is.na(x) now. 
  CorrectAnswer: is.na(x)
  AnswerTests: omnitest(correctExpr='is.na(x)')
  Hint: Type is.na(x) to see whether each element in x is NA or not!
  
- Class: text
  Output: "As you can see, this outputs a vector of logical values (trues and falses). Each element of 
  this vector corresponds to the same element of x. For example, the first TRUE/FALSE is telling you whether
  the first element of x, in R notation x[1], is NA or not."

- Class: text
  Output: "When we pass a logical vector of equal length to our index brackets [ ], then R will return
  only those values corresponding to TRUE. Lets try this now."

- Class: mult_question
  Output: "What do you think `x[is.na(x)]` will give you?"
  AnswerChoices: A vector of all NAs; A vector with no NAs; A vector of TRUEs and FALSEs; A vector of length 0
  CorrectAnswer: A vector of all NAs
  AnswerTests: omnitest(correctVal="A vector of all NAs")
  Hint: Remember that `is.na(x)` tells us where the NAs are in a vector. So if we subset x based on that, what do you expect to happen?

- Class: cmd_question
  Output: "Prove it to yourself by typing `x[is.na(x)]`."
  CorrectAnswer: x[is.na(x)]
  AnswerTests: omnitest(correctExpr='x[is.na(x)]')
  Hint: Type x[is.na(x)] to see that you get all NAs, which is clearly not what we want!

- Class: cmd_question
  Output: "Another useful operator is the exclamation mark `!`, which gives us the negation of a 
  logical expression, so `!is.na(x)` can be read as 'is not NA'. Therefore, if we want to create a 
  vector called `y` that contains all of the non-NA values from `x`, we can use `y <- x[!is.na(x)]`. Give it a try."
  CorrectAnswer: y <- x[!is.na(x)]
  AnswerTests: omnitest(correctExpr='y <- x[!is.na(x)]')
  Hint: Type y <- x[!is.na(x)] to capture all non-missing values from x.

- Class: cmd_question
  Output: Print `y` to the console.
  CorrectAnswer: 'y'
  AnswerTests: omnitest(correctExpr='y')
  Hint: Type y to view its contents.

- Class: text
  Output: Now that we've isolated the non-missing values of `x` and put them in `y`, we can subset `y` as we please.

- Class: text
  Output: "Functions aren't the only way to create logical vectors. We can also use operators that
  compare one value to another and respond with a TRUE or FALSE. These operators include greater than
  '>', less than '<', is equal to '==', and is not equal to '!='. Note that two equal signs are needed
  in 'equal to' because a single = instead denotes an assignment opertor, much like '<-'."
  
- Class: cmd_question
  Output: "For example, the expression y > 0 will give us a vector of logical values the same length as y, 
    with TRUEs corresponding to values of y that are greater than zero and FALSEs corresponding to values 
      of y that are less than or equal to zero. Enter y > 0 now to see."
  CorrectAnswer: y > 0
  AnswerTests: omnitest(correctExpr='y > 0')
  Hint: Type y to view its contents.

- Class: mult_question
  Output: Lets subset. What do you think y[y > 0] will give you?
  AnswerChoices: A vector of all the positive elements of y; A vector of all the negative elements of y; A vector of all NAs; A vector of length 0; A vector of TRUEs and FALSEs
  CorrectAnswer: A vector of all the positive elements of y
  AnswerTests: omnitest(correctVal="A vector of all the positive elements of y")
  Hint: The logical expression y > 0 will give us TRUE for each element of y that is positive. Based on that, what do you think y[y > 0] will return?

- Class: cmd_question
  Output: Type `y[y > 0]` to see that we get all of the positive elements of `y`, which are also the positive elements of our original vector `x`.
  CorrectAnswer: y[y > 0]
  AnswerTests: omnitest(correctExpr='y[y > 0]')
  Hint: Type y[y > 0] to view only the positive elements of y.

- Class: cmd_question
  Output: You might wonder why we didn't just start with `x[x > 0]` to isolate the positive elements of `x`. Try that now to see why.
  CorrectAnswer: x[x > 0]
  AnswerTests: omnitest(correctExpr='x[x > 0]')
  Hint: Try x[x > 0] to see why we didn't use this approach.

- Class: text
  Output: Since NA is not a value, but rather a placeholder for an unknown quantity, the expression `NA > 0` evaluates to NA. 
    Hence we get a bunch of NAs mixed in with our positive numbers when we do this.

- Class: text
  Output: "We can also string together logical statements with the 'and' operator `&`, meaning that 
  both statements must be true to evaluate as true, and the 'or' operator `|`, meaning that either 
  statement can be true to evaluate as true."

- Class: cmd_question
  Output: "Combining our knowledge of logical operators with our knowledge of subsetting, we could do this: `x[!is.na(x) & x > 0]`. Try it out."
  CorrectAnswer: x[!is.na(x) & x > 0]
  AnswerTests: omnitest(correctExpr='x[!is.na(x) & x > 0]')
  Hint: Try x[!is.na(x) & x > 0] to see what you get.

- Class: text
  Output: In this case, we obtain only values of `x` that are both non-missing AND greater than zero.

- Class: text
  Output: "## How to index by position (reprise)"

- Class: text
  Output: I've already shown you how to subset just the first ten values of x using `x[1:10]`. In 
    this case, we're providing a vector of positive integers inside of the square brackets, which 
    tells R to return only the elements of `x` numbered 1 through 10.

- Class: text
  Output: Many programming languages use what's called 'zero-based indexing', which means that the 
    first element of a vector is considered element 0. R uses 'one-based indexing', which (you guessed it!) 
    means the first element of a vector is considered element 1.

- Class: cmd_question
  Output: Can you figure out how we'd subset the 3rd, 5th, and 7th elements of `x`? Hint, use the `c()` 
    function to specify the element numbers as a numeric vector.
  CorrectAnswer: x[c(3, 5, 7)]
  AnswerTests: omnitest(correctExpr='x[c(3, 5, 7)]')
  Hint: Create a vector of indexes with c(3, 5, 7), then put that inside of the square brackets.

- Class: cmd_question
  Output: It's important that when using integer vectors to subset our vector `x`, we stick with the set 
    of indexes {1, 2, ..., 40} since `x` only has 40 elements. What happens if we ask for the zeroth element 
    of `x` (i.e. `x[0]`)? Give it a try.
  CorrectAnswer: x[0]
  AnswerTests: omnitest(correctExpr='x[0]')
  Hint: Try x[0] to see what happens when we refer to the zeroth element of a vector, which is not defined in R.

- Class: cmd_question
  Output: As you might expect, we get nothing useful. Unfortunately, R doesn't prevent us from 
    doing this. What if we ask for the 3000th element of `x`? Try it out.
  CorrectAnswer: x[3000]
  AnswerTests: omnitest(correctExpr='x[3000]')
  Hint: Request the 3000th element of x (which does not exist) with x[3000].

- Class: text
  Output: Again, nothing useful, but R doesn't prevent us from asking for it. This should be a 
    cautionary tale. You should always make sure that what you are asking for is within the bounds 
    of the vector you're working with.

- Class: text
  Output: "## How to use negative indexing (i.e., everything *except* a specified index)"

- Class: text
  Output: What if we're interested in all elements of `x` *except* the 2nd and 10th elements? It would 
    be pretty tedious to construct a vector containing all numbers 1 through 40 except 2 and 10.

- Class: cmd_question
  Output: Luckily, R accepts negative integer indexes. Whereas `x[c(2, 10)]` gives us *only* the 2nd and 
    10th elements of `x`, `x[c(-2, -10)]` gives us all elements of `x` *except* for the 2nd and 10 elements.  
    Try `x[c(-2, -10)]` now to see this.
  CorrectAnswer: x[c(-2, -10)]
  AnswerTests: omnitest(correctExpr='x[c(-2, -10)]')
  Hint: Give x[c(-2, -10)] a try.

- Class: cmd_question
  Output: A shorthand way of specifying multiple negative numbers is to put the negative sign out in 
    front of the vector of positive numbers. Type `x[-c(2, 10)]` to get the exact same result.
  CorrectAnswer: x[-c(2, 10)]
  AnswerTests: omnitest(correctExpr='x[-c(2, 10)]')
  Hint: Use x[-c(2, 10)] to simply things a bit. This could be a time saver if specifying many negative indexes.

- Class: text
  Output: "## How to index by name"

- Class: text
  Output: So far, we've covered three types of index vectors---logical, positive integer, and 
    negative integer. The only remaining type requires us to introduce the concept of 'named' elements.

- Class: cmd_question
  Output: Create a numeric vector with three named elements using `vect1 <- c(foo = 11, bar = 2, norf = NA)`.
  CorrectAnswer: vect1 <- c(foo = 11, bar = 2, norf = NA)
  AnswerTests: omnitest(correctExpr='vect1 <- c(foo = 11, bar = 2, norf = NA)')
  Hint: Create a named vector with vect1 <- c(foo = 11, bar = 2, norf = NA).

- Class: cmd_question
  Output: When we type `vect1` in the console, you'll see that each element has a name above each 
     element. Try it out.
  CorrectAnswer: vect1
  AnswerTests: omnitest(correctExpr='vect1')
  Hint: Type vect1 to view its contents.

- Class: cmd_question
  Output: We can also get the names of `vect1` by passing `vect1` as an argument to the function `names()`. Give that a try.
  CorrectAnswer: names(vect1)
  AnswerTests: omnitest(correctExpr='names(vect1)')
  Hint: Check out the results of names(vect1).

- Class: cmd_question
  Output: Alternatively, we can create an unnamed vector, `vect2`, with `c(11, 2, NA)`. Do that now.
  CorrectAnswer: vect2 <- c(11, 2, NA)
  AnswerTests: omnitest(correctExpr='vect2 <- c(11, 2, NA)')
  Hint: Create an ordinary (unnamed) vector called vect2 that contains c(11, 2, NA).

- Class: cmd_question
  Output: Then, we can add the `names` attribute to `vect2` after the fact with
      `names(vect2) <- c("foo", "bar", "norf")`. Go ahead. (Notice that now we use quotation marks
      to specify the names).
  CorrectAnswer: names(vect2) <- c("foo", "bar", "norf")
  AnswerTests: omnitest(correctExpr='names(vect2) <- c("foo", "bar", "norf")')
  Hint: Add names to vect2 with names(vect2) <- c("foo", "bar", "norf").

- Class: cmd_question
  Output: Now, let's check that `vect1` and `vect2` are the same by passing them as arguments to the `identical()` function.
  CorrectAnswer: identical(vect1, vect2)
  AnswerTests: any_of_exprs('identical(vect1, vect2)', 'identical(vect2, vect)')
  Hint: The identical() function tells us if its' first two arguments are, well, identical.

- Class: text
  Output: Indeed, `vect1` and `vect2` are identical vectors.

- Class: mult_question
  Output: Now, back to the matter of subsetting a vector by named elements. Which of 
    the following commands do you think would give us the second element of `vect1`?
  AnswerChoices: vect1["bar"]; vect1[bar]; vect1["2"]
  CorrectAnswer: vect1["bar"]
  AnswerTests: omnitest(correctVal='vect1["bar"]')
  Hint: If we want the element named "bar" (i.e. the second element of vect1), which command would get us that?

- Class: cmd_question
  Output: Now, try it out.
  CorrectAnswer: vect1["bar"]
  AnswerTests: omnitest(correctExpr='vect1["bar"]')
  Hint: Try vect1["bar"].

- Class: cmd_question
  Output: Likewise, we can specify a vector of names with `vect1[c("foo", "bar")]`. Try it out.
  CorrectAnswer: vect1[c("foo", "bar")]
  AnswerTests: omnitest(correctExpr='vect1[c("foo", "bar")]')
  Hint: Use vect1[c("foo", "bar")] to get only the elements of vect1 named "foo" and "bar".
  
- Class: cmd_question
  Output: Actually, you can also use integer indexes on named vectors. First, notice that one of the options in the 
    question above was `vect1["2"]`. Does this work? Try it out.
  CorrectAnswer: vect1["2"]
  AnswerTests: omnitest(correctExpr='vect1["2"]')
  Hint: Type vect1["2"]
  
- Class: text
  Output: As above, integer indexes need to be integers. Putting the number 2 in quotes tells R that
    it is in fact a text character.
    
- Class: cmd_question    
  Output: So, how would you index the second element of `vect1` using an integer?
  CorrectAnswer: vect1[2]
  AnswerTests: omnitest(correctExpr='vect1[2]')
  Hint: Look back up in the lesson ...

- Class: text
  Output: "BEST PRACTICE: If you have names, it is best to use them. This issue will become more important
    when we start working with data frame and lists. The problem is that if the columns in a dataframe get
    out of order, column 2 may no longer be what it was. Using a name ensures that R always gets the 
    correct thing you are interested in."

- Class: text
  Output: Yay!! Now you know all four methods of subsetting data from vectors. Different approaches 
    are best in different scenarios and when in doubt, try it out!

- Class: mult_question
  Output: Please submit the log of this lesson to Google Forms so
    that Simon may evaluate your progress.
  AnswerChoices: Go on, then.
  CorrectAnswer: Go on, then.
  AnswerTests: submit_log()
  Hint: Pleeeeease?
