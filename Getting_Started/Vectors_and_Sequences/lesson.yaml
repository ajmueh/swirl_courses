- Class: meta
  Course: Getting Started
  Lesson: Vectors and Sequences
  Author: Simon Queenborough & Andrew Muehleisen, modified from Nick Carchedi
  Type: Standard
  Organization: Yale FES
  Version: 2.2.0

- Class: text
  Output: "# Vectors and Sequences"
  
- Class: text
  Output: "## Introducing vectors and elements"

- Class: text
  Output: "In this lesson, you will learn how to create your first data objects in R, vectors. Vectors are 1 
  dimensional 'structures' that store data. For example, if we measured the height of 10 people, then we might have a vector 
  of 10 heights in R, one entry (called an 'element') for each person. Vectors are the most common data object you will 
  work with in R."

- Class: cmd_question
  Output: The easiest way to create a vector is with the `c()` function, which stands
    for 'concatenate' or 'combine'. To create a vector containing the numbers 1.1,
    9, and 3.14, type `c(1.1, 9, 3.14)`. Each number must be seperated by a comma. Try it now and store the result in a variable
    called `z`.
  CorrectAnswer: z <- c(1.1, 9, 3.14)
  AnswerTests: omnitest(correctExpr='z <- c(1.1, 9, 3.14)')
  Hint: Inputting z <- c(1.1, 9, 3.14) will assign the vector (1.1, 9, 3.14) to a
    new variable called z. Including single spaces after the commas in the vector
    is not required, but helps make your code less cluttered and more readable.

- Class: cmd_question
  Output: Anytime you have questions about a particular function, you can access R's
    built-in help files via the `?` command. For example, if you want more information
    on the `c()` function, type ?c without the parentheses that normally follow a function
    name. Give it a try.
  CorrectAnswer: ?c
  AnswerTests: omnitest(correctExpr='?c')
  Hint: Type ?c and press Enter. This will bring up the help file for the c() function.

- Class: cmd_question
  Output: Type `z` to view its contents. Notice that there are no commas separating
    the values in the output. 
  CorrectAnswer: z
  AnswerTests: omnitest(correctExpr='z')
  Hint: Type z and press Enter to view its contents.

- Class: cmd_question
  Output: You can combine vectors to make a new vector. Create a new vector that contains
    z, 555, then z again in that order. Don't assign this vector to a new variable,
    so that we can just see the result immediately.
  CorrectAnswer: c(z, 555, z)
  AnswerTests: omnitest(correctExpr='c(z, 555, z)')
  Hint: Type c(z, 555, z). Don't create a new variable. We just want to view the result.

- Class: text
  Output: "## Working with vectors"

- Class: cmd_question
  Output: 'Numeric vectors can be used in arithmetic expressions. Type the following
    to see what happens: `z * 2 + 100`.'
  CorrectAnswer: z * 2 + 100
  AnswerTests: omnitest(correctExpr='z * 2 + 100')
  Hint: Enter z * 2 + 100, without assigning the result to a variable. The `*` symbol
    is used for multiplication and shares a key with the number 8 on many keyboards.

- Class: text
  Output: First, R multiplied each of the three elements in z by 2. Then it added
    100 to each element to get the result you see above. This is another extremely useful
    feature of R and will allow you to work with very large data sets incredibly easily and powerfully.

- Class: text
  Output: Other common arithmetic operators are `+`, `-`, `/`, and `^` (where x^2
    means 'x squared'). To take the square root, use the sqrt() function and to take
    the absolute value, use the abs() function.

- Class: cmd_question
  Output: Take the square root of z - 1 and assign it to a new variable called `my_sqrt`.
  CorrectAnswer: my_sqrt <- sqrt(z - 1)
  AnswerTests: omnitest(correctExpr='my_sqrt <- sqrt(z - 1)')
  Hint: Assign the result of sqrt(z - 1) to a variable called my_sqrt.

- Class: mult_question
  Output: Before we view the contents of the `my_sqrt` variable, what do you think it
    contains? (Enter the number of the option you think is correct and press Enter).
  CorrectAnswer: a vector of length 3
  AnswerChoices: a vector of length 3; a single number (i.e a vector of length 1);
    a vector of length 0 (i.e. an empty vector)
  AnswerTests: omnitest(correctVal='a vector of length 3')
  Hint: 'Think about how R handled the other ''vectorized'' operations: element-by-element.'

- Class: cmd_question
  Output: Print the contents of `my_sqrt`.
  CorrectAnswer: my_sqrt
  AnswerTests: omnitest(correctExpr='my_sqrt')
  Hint: Just type my_sqrt and press Enter to view its value.

- Class: text
  Output: As you may have guessed, R first subtracted 1 from each element of z, then
    took the square root of each element. This leaves you with a vector of the same
    length as the original vector z.

- Class: cmd_question
  Output: Now, create a new variable called `my_div` that gets the value of z divided
    by my_sqrt.
  CorrectAnswer: my_div <- z / my_sqrt
  AnswerTests: omnitest(correctExpr='my_div <- z / my_sqrt')
  Hint: Enter my_div <- z / my_sqrt. The spaces on either side of the `/` sign are not
    required, but can often improve readability by making code appear less cluttered.
    In the end, it's personal preference.

- Class: mult_question
  Output: Which statement do you think is true?
  CorrectAnswer: The first element of my_div is equal to the first element of z divided
    by the first element of my_sqrt, and so on...
  AnswerChoices: The first element of my_div is equal to the first element of z divided
    by the first element of my_sqrt, and so on...; my_div is a single number (i.e a
    vector of length 1); my_div is undefined
  AnswerTests: omnitest(correctVal='The first element of my_div is equal to the first
    element of z divided by the first element of my_sqrt, and so on...')
  Hint: Think about how R handled the other 'vectorized' operations like `+` and `*`.

- Class: cmd_question
  Output: Go ahead and print the contents of `my_div`.
  CorrectAnswer: my_div
  AnswerTests: omnitest(correctExpr='my_div')
  Hint: Type my_div and press Enter to see its contents.

- Class: text
  Output: When given two vectors of the same length, R simply performs the specified
    arithmetic operation (`+`, `-`, `*`, etc.) element-by-element. If the vectors
    are of different lengths, R 'recycles' the shorter vector until it is the same
    length as the longer vector.

- Class: text
  Output: When we did `z * 2 + 100` in our earlier example, z was a vector of length
    3, but technically 2 and 100 are each vectors of length 1.

- Class: text
  Output: 'Behind the scenes, R is ''recycling'' the 2 to make a vector of 2s and
    the 100 to make a vector of 100s. In other words, when you ask R to compute z
    * 2 + 100, what it really computes is this: z * c(2, 2, 2) + c(100, 100, 100).'

- Class: cmd_question
  Output: To see another example of how this vector 'recycling' works, try adding
    `c(1, 2, 3, 4)` and `c(0, 10)`. Don't worry about saving the result in a new variable.
  CorrectAnswer: c(1, 2, 3, 4) + c(0, 10)
  AnswerTests: omnitest(correctExpr='c(1, 2, 3, 4) + c(0, 10)')
  Hint: Enter c(1, 2, 3, 4) + c(0, 10) in the console to see how R adds two vectors
    of different length. Don't assign the result to a variable.

- Class: text
  Output: If the length of the shorter vector does not divide evenly into the length
    of the longer vector, R will still apply the 'recycling' method, but will throw
    a warning to let you know something fishy might be going on.

- Class: cmd_question
  Output: Try c(1, 2, 3, 4) + c(0, 10, 100) for an example.
  CorrectAnswer: c(1, 2, 3, 4) + c(0, 10, 100)
  AnswerTests: omnitest(correctExpr='c(1, 2, 3, 4) + c(0, 10, 100)')
  Hint: Type c(1, 2, 3, 4) + c(0, 10, 100) to see how R handles adding two vectors,
    when the shorter vector's length does not divide evenly into the longer vector's
    length. Don't worry about assigning the result to a variable.


- Class: text
  Output: "### Time-saving tricks for working with the command-line"

- Class: text
  Output: Before continuing this lesson, I'd like to show you a couple of time-saving tricks.

- Class: text
  Output: "Earlier in the lesson, you computed z * 2 + 100. Let's pretend that you made a 
        mistake and that you meant to add 1000 instead of 100. You could either re-type the expression, or..."

- Class: cmd_question
  Output: "In many programming environments, the up arrow will cycle through previous commands. 
       Try hitting the up arrow on your keyboard until you get to this command `z * 2 + 100`, then
       change 100 to 1000 and hit Enter. If the up arrow doesn't work for you, just type the corrected command."
  CorrectAnswer: z * 2 + 1000
  AnswerTests: omnitest(correctExpr='z * 2 + 1000')
  Hint: If your environment does not support the up arrow feature, then just type the corrected command to move on.

- Class: text
  Output: "Finally, let's pretend you'd like to view the contents of a variable that you created earlier, but 
     you can't seem to remember if you named it `my_div` or `myDiv`. You could try both and see what works, or..."

- Class: cmd_question
  Output: "... You can type the first two letters of the variable name, then hit the Tab key 
      (possibly more than once). Most programming environments will provide a list of variables that you've 
      created that begin with 'my'. This is called 'auto-completion' and can be quite handy when you have many 
      variables in your workspace. In RStudio, it works particularly well, including suggesting the options
      to functions (which we will get to later). Give it a try. (If auto-completion doesn't work for you, 
      just type my_div and press Enter.)"
  CorrectAnswer: my_div
  AnswerTests: omnitest(correctExpr='my_div')
  Hint: If your programming environment doesn't support auto-completion, just type my_div and hit Enter to move on.

- Class: text
  Output: You now know how to create and work with vectors in R! Awesome! 
  
- Class: text
  Output: "## How to create sequences of numbers"
  
- Class: text
  Output: "We will now create sequences of numbers or characters in R. Sequences are used in many different tasks, 
  from plotting the axes of graphs to generating simulated data. Note that we will be creating more vectors."
  
- Class: text
  Output: "### Make sequences using `:`"
  
- Class: cmd_question
  Output: The simplest way to create a sequence of numbers in R is by using the `:`
    operator. Type 1:20 to see how it works.
  CorrectAnswer: '1:20'
  AnswerTests: omnitest(correctExpr='1:20')
  Hint: Type 1:20 with no spaces. Make sure to use a regular colon and NOT a semi-colon.

- Class: text
  Output: That gave us every integer between (and including) 1 and 20 (an integer is a 
    positive or negative counting number, including 0).
  
- Class: cmd_question  
  Output: We could also use it to create a sequence of real numbers (a real number is a positive, 
    negative, or 0 with an infinite or finite sequence of digits after the decimal place). 
    For example, try typing pi:10.
  CorrectAnswer: pi:10
  AnswerTests: omnitest(correctExpr='pi:10')
  Hint: Enter pi:10 and see what happens. pi is a predefined constant in R that takes
    on the value 3.1415....

- Class: text
  Output: The result is a vector of real numbers starting with pi (3.142...) and increasing
    in increments of 1. The upper limit of 10 is never reached, since the next number
    in our sequence would be greater than 10.
    
- Class: cmd_question
  Output: Note also that pi is one of the few constants built in to R. Type ?pi to check the others.
  CorrectAnswer: ?pi
  AnswerTests: omnitest(correctExpr='?pi')
  Hint: Enter ?pi. What other constants are predefined in R?

- Class: cmd_question
  Output: 'What happens if we do 15:1? Give it a try to find out.'
  CorrectAnswer: '15:1'
  AnswerTests: omnitest(correctExpr='15:1')
  Hint: Type 15:1 and press Enter.

- Class: text
  Output: It counted backwards in increments of 1! This is sometimes useful for plotting 
    coefficients from models in reverse order.

- Class: text
  Output: "Remember that if you have questions about a particular R function, you
    can access its documentation with a question mark followed by the function name:
    ?function_name_here. However, in the case of an operator like the colon used above,
    you must enclose the symbol in backticks like this: ?`:`. (NOTE: The backtick
    (`) key is generally located in the top left corner of a keyboard, above the Tab
    key. If you don't have a backtick key, you can use regular quotes.)"

- Class: cmd_question
  Output: Pull up the documentation for `:` now.
  CorrectAnswer: ?`:`
  AnswerTests: any_of_exprs('?`:`', "?':'", '?":"')
  Hint: "In order to view the documentation for a symbol like the colon operator,
    you have to use backticks (or quotes). This is so R knows you are not attempting to use the
    symbol in the command. Here's what it looks like: ?`:`. Don't forget the question
    mark out front."


- Class: text
  Output: "### Make sequences using `seq()`"

- Class: text
  Output: "Often, we'll desire more control over a sequence we're creating than what
    the `:` operator gives us. The `seq()` ('sequence') function serves this purpose."

- Class: cmd_question
  Output: The most basic use of `seq()` does exactly the same thing as the `:` operator.
    Try `seq(1, 20)` to see this.
  CorrectAnswer: seq(1, 20)
  AnswerTests: omnitest(correctExpr='seq(1, 20)')
  Hint: Type seq(1, 20) and press Enter. The space after the comma is not required,
    but is recommended as it tends to make your code appear less cluttered.
    
- Class: text    
  Output: This gives us the same output as 1:20. Check the help file for `seq()`.
  CorrectAnswer: ?seq
  AnswerTests: omnitest(correctExpr='?seq')
  Hint: Type ?seq
  
- Class: text
  Output: The help files show the arguments listed for the `seq()` function. The first
    two arguments are "from =" and "to = ". In R, you do not have to specify the
    arguments by name if you write out their values in the same order as written in the function.
    However, for complex functions it is often best practice to do so and makes your code 
    much clearer.
    
- Class: cmd_question
  Output: For example, `seq(from = 1, to = 20)` will give the same output as `seq(1, 20)`. Try it!
  CorrectAnswer: seq(from = 1, to = 20)
  AnswerTests: omnitest(correctExpr='seq(from = 1, to = 20)')
  Hint: Remember to write out the arguments by name for seq()!

- Class: cmd_question
  Output:  OK, let's say that instead of 1 to 20, we
    want a vector of numbers ranging from 0 to 10, incremented by 0.5. `seq(0, 10,
    by = 0.5)` does just that. Try it out.
  CorrectAnswer: seq(0, 10, by = 0.5)
  AnswerTests: omnitest(correctExpr='seq(0, 10, by = 0.5)')
  Hint: You are still using the seq() function here, but this time with an extra argument
    that tells R you want to increment your sequence by 0.5. Try seq(0, 10, by = 0.5).

- Class: cmd_question
  Output: Or maybe we don't care what the increment is and we just want a sequence
    of 30 numbers between 5 and 10. `seq(5, 10, length = 30)` does the trick. Give it
    a shot now and store the result in a new variable called `my_seq`.
  CorrectAnswer: my_seq <- seq(5, 10, length = 30)
  AnswerTests: omnitest(correctExpr='my_seq <- seq(5, 10, length = 30)')
  Hint: 'You''re using the same function here, but changing its arguments for different
    results. Be sure to store the result in a new variable called my_seq, like this:
    my_seq <- seq(5, 10, length = 30).'
    
- Class: text
  Output: If you look closely again at the help file for ?seq, you will not see an argument 
    "length = ", but only "length.out =". You can actually use any abbreviation of the 
    argument name, as long as it is different from any other argument. You could even 
    use just "l = "!

- Class: cmd_question
  Output: To confirm that `my_seq` has length 30, we can use the `length()` function.
    Try it now. To do this, you need to include the object 'my_seq' as the value of 
    argument 'x' of `length()`.
  CorrectAnswer: length(my_seq)
  AnswerTests: omnitest(correctExpr='length(my_seq)')
  Hint: Use length(my_seq) to view the length of the my_seq variable.

- Class: text
  Output: Let's pretend we don't know the length of `my_seq`, but we want to generate
    a sequence of integers from 1 to N, where N represents the length of the my_seq
    vector. In other words, we want a new vector (1, 2, 3, ...) that is the same length
    as my_seq.

- Class: cmd_question
  Output: 'There are several ways we could do this. One possibility is to combine
    the `:` operator and the `length()` function like this: `1:length(my_seq)`. Give that
    a try.'
  CorrectAnswer: 1:length(my_seq)
  AnswerTests: omnitest(correctExpr='1:length(my_seq)')
  Hint: Try 1:length(my_seq), without assigning the result to a new variable.

- Class: cmd_question
  Output: Another option is to use `seq(along.with = my_seq)`. Give that a try.
  CorrectAnswer: seq(along.with = my_seq)
  AnswerTests: omnitest(correctExpr='seq(along.with = my_seq)')
  Hint: Type seq(along.with = my_seq). Notice we're using the same seq() function, but
    with a different argument called `along.with`. This tells R that you want a sequence
    'along with' the sequence my_seq. Remember you can type ?seq if you have questions
    about the seq() function.

- Class: cmd_question
  Output: However, as is the case with many common tasks, R has a separate built-in
    function for this purpose called `seq_along()`. Type `seq_along(my_seq)` to see it
    in action.
  CorrectAnswer: seq_along(my_seq)
  AnswerTests: omnitest(correctExpr='seq_along(my_seq)')
  Hint: The seq_along() function is a variation of the seq() function. Try seq_along(my_seq)
    to get the same result yet another way.

- Class: text
  Output: There are often several approaches to solving the same problem, particularly
    in R. Simple approaches that involve less typing are generally best. It's also
    important for your code to be readable, so that you and others can figure out
    what's going on without too much hassle.

- Class: text
  Output: If R has a built-in function for a particular task, it's likely that function
    is highly optimized for that purpose and is your best option. One of the 
    philosophies of R (and Unix more generally) is to have tools (or functions) that
    do specific things very well and then link these together, rather than a single
    multi-purpose tool that does many things poorly. 
    
- Class: text
  Output: This approach is like having a seperate knife, fork, and spoon, rather than 
    a Spork ... In most situations, cutlery (US: "silverware") is superior to the Spork.
    
- Class: text
  Output: As you become a
    more advanced R programmer, you will learn how to link and nest these apparently 
    simple functions to do incredibly powerful tasks. You will also design your own 
    functions to perform tasks
    when there are no better options. We'll explore writing your own functions in
    future lessons.



- Class: text
  Output: "### Make sequences using `rep()`"

- Class: text
  Output: OK, back to the show. One more function related to creating sequences of numbers is `rep()`, which
    stands for 'replicate'. Let's look at a few uses.

- Class: cmd_question
  Output: If we're interested in creating a vector that contains 40 zeros, we can
    use `rep(0, times = 40)`. Try it out.
  CorrectAnswer: rep(0, times = 40)
  AnswerTests: omnitest(correctExpr='rep(0, times = 40)')
  Hint: Type rep(0, times = 40) to make a vector containing 40 zeros.

- Class: cmd_question
  Output: If instead we want our vector to contain 10 repetitions of the vector (0,
    1, 2), we can do `rep(c(0, 1, 2), times = 10)`. Go ahead.
  CorrectAnswer: rep(c(0, 1, 2), times = 10)
  AnswerTests: omnitest(correctExpr='rep(c(0, 1, 2), times = 10)')
  Hint: Try rep(c(0, 1, 2), times = 10) for a different variation on the same theme.
    Be sure to use the c() function to tell R that the numbers 0, 1, and 2 make up
    a vector.

- Class: cmd_question
  Output: Finally, let's say that rather than repeating the vector (0, 1, 2) over
    and over again, we want our vector to contain 10 zeros, then 10 ones, then 10
    twos. We can do this with the `each` argument. Try `rep(c(0, 1, 2), each = 10)`, and store it as a new 
    variable called `my_rep`.
  CorrectAnswer: my_rep <- rep(c(0, 1, 2), each = 10)
  AnswerTests: omnitest(correctExpr='my_rep <- rep(c(0, 1, 2), each = 10)')
  Hint: Type rep(c(0, 1, 2), each = 10) to see how the `each` argument to the rep()
    function alters its behavior slightly.
    
- Class: cmd_question
  Output: "First, lets make sure that our object is in fact a vector. Occasionally in R we'll want to know whether an object 
  is what we think it is - there are many functions that let us do this, and they all follow the is.object_type format. 
  Go ahead and enter `is.vector(my_rep)` now."
  CorrectAnswer: is.vector(my_rep)
  AnswerTests: omnitest(correctExpr='is.vector(my_rep)')
  Hint: Remember to nest my_rep in the function is.vector()
  
- Class: text
  Output: my_rep is a vector! 

- Class: cmd_question
  Output: "Lets see what this vector looks like. We'll use the `plot()` function, something you will become very familiar 
  with in time. It can take many types and forms of data, as well as a whole host of arguments to customize the output, 
  but for now, just go ahead and `plot(my_rep)`."
  CorrectAnswer: plot(my_rep)
  AnswerTests: omnitest(correctExpr='plot(my_rep)')
  Hint: Use plot(my_rep)
  
- Class: text
  Output: "You can see that the y-axis is labeled as my_rep, with values spanning the numeric range of your vector. 
  Because we're only plotting one source of data, the x-axis is just an index telling you where along your vector those 
  values occur. We will learn later how to plot two sources of data to examine their relationship, making the resulting 
  plots much nicer in the process."
  
- Class: cmd_question
  Output: "The function `rep()` also works with other data types like characters or factors (characters or numbers that represent 
  categories of data, like brown or blue eyes). Using rep is often useful in this way for giving factors to your data. 
  Try repeating the vector `c('a','b','c')` 5 times." 
  CorrectAnswer: rep(c("a","b","c"), 5)
  AnswerTests: omnitest(correctExpr='rep(c("a","b","c"), 5)')
  Hint: Remember to add quotes around each element of the vector. You can use ?rep to check what your second argument should be. 
    
- Class: text
  Output: "Congratulations! Now you have several powerful tools that you can use to generate sequences of of values. 
  You also learnt to use the function `length()`, the `:` operator, and made your first plot. Your R skills are building!"

- Class: mult_question
  Output: Please submit the log of this lesson to Google Forms so
    that Simon may evaluate your progress.
  AnswerChoices: Go ahead, make my day!
  CorrectAnswer: Go ahead, make my day!
  AnswerTests: submit_log()
  Hint: You probably should log that you completed this lesson ...
  
