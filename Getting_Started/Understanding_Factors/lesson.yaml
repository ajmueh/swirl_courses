- Class: meta
  Course: intro2r
  Lesson: Understanding Factors
  Author: Simon A. Queenborough (based on https://swcarpentry.github.io/r-novice-inflammation/12-supp-factors/index.html)
  Type: Standard
  Organization: Yale FES
  Version: 2.2.0


- Class: text
  Output: "# Understanding Factors"

- Class: text
  Output: "In this lesson, you will understand how to represent categorical data in R, know 
    the difference between ordered and unordered factors, be aware of some of the problems 
    encountered when using factors."

- Class: text
  Output: "## What are factors?"

- Class: text
  Output: "Factors are used to represent categorical data. Factors can
    be *ordered* or *unordered* and are an important class for statistical 
    analysis and for plotting."

- Class: text
  Output: "Factors are actually stored as *integers*, and have *labels* associated with
    these unique integers. While factors look (and often behave) like character 
    vectors, they are actually integers under the hood, and you need to be
    careful when treating them like strings."

- Class: text
  Output: "## The factor() command"

- Class: cmd_question
  Output: "The `factor()` command is used to create and modify factors in R. Run the  
    following code to generate a short factor: `sex <- factor(c('male', 'female', 'female', 'male'))`."
  CorrectAnswer: sex <- factor(c('male', 'female', 'female', 'male'))
  AnswerTests: omnitest(correctExpr='sex <- factor(c("male", "female", "female", "male"))')
  Hint: Copy the code into the console.

- Class: text
  Output: "We used the concatenate function (`c()`) to  stick four words together. These 
    form the factor."

- Class: text
  Output: "Once created, factors can only contain a pre-defined set values, 
    known as *levels*. By default, R always sorts levels in alphabetical order. 
    For instance, we have a factor with 2 levels."

- Class: cmd_question
  Output: "R will assign `1` to the level `female` and `2` to the level `male` 
    (because 'f' comes before 'm', even though the first element in this vector 
    is `male`). Check this by using the function `levels()`"
  CorrectAnswer: levels(sex)
  AnswerTests: omnitest(correctExpr='levels(sex)')
  Hint: Put the variable sex inside the function levels().

- Class: cmd_question
  Output: "Check the number of levels using `nlevels()`"
  CorrectAnswer: nlevels(sex)
  AnswerTests: omnitest(correctExpr='nlevels(sex)')
  Hint: Put the variable sex inside the function nlevels().

- Class: text
  Output: "Sometimes, the order of the factors does not matter, other 
    times you might want to specify the order because it is meaningful 
    (e.g., “low”, “medium”, “high”) or it is required by particular type 
    of analysis. Additionally, specifying the order of the levels allows us to compare levels." 

- Class: cmd_question
  Output: "Check the factor `food` loaded with the lesson. Type `food`."
  CorrectAnswer: food
  AnswerTests: omnitest(correctExpr='food')
  Hint: Type food.

- Class: cmd_question
  Output: "You can see a factor with 7 elements. Check the levels of this factor."
  CorrectAnswer: levels(food)
  AnswerTests: omnitest(correctExpr='levels(food)')
  Hint: Check what the levels are for the variable food with the function levels().

- Class: text
  Output: "The first level here is 'high', then 'low', following the alphanumeric rule above. 
    In order to put these levels into a sensible order (low > medium > high), we need to add two 
    arguments to the `factor()` function. "

- Class: text
  Output: "# Ordered factors"

- Class: text
  Output: "The function `factor()` takes two more arguments. 
    The `levels = ` tells R the different levels in the factor. 
    The `ordered = ` argument tells R whether these factors are ordered (`= TRUE`)
    or not (`= FALSE`). The order will follow the order that the levels are written in the
    `levels = ` argument."

- Class: cmd_question
  Output: "Modify the `food` variable to make it an ordered factor, with 
    levels ordered low > medium > high. Assign this to a the new variable `food1`"
  CorrectAnswer: food1 <- factor(food, levels = c("low", "medium", "high"), ordered = TRUE)
  AnswerTests: omnitest(correctExpr='food1 <- factor(food, levels = c("low", "medium", "high"), ordered = TRUE)')
  Hint: "You will need to create a new variable, food1, and use the arguments levels and ordered."

- Class: text
  Output: "In R’s memory, these factors are represented by numbers (1, 2, 3). 
    They are better than using simple integer labels because factors are self
    describing: 'low', 'medium', and 'high' is more descriptive than '1', '2', '3'. 
    Which is low? You wouldn't be able to tell with just integer data. Factors 
    have this information built in. It is particularly helpful when there are many levels."

- Class: mult_question
  Output: "You have a vector representing levels of exercise undertaken by 5 subjects: 'l', 'n', 'n', 'i', 'l', 
     where n = none, l = light, and i = intense. What is the best way to represent this in R?"
  AnswerChoices: exercise <- c('l', 'n', 'n', 'i', 'l');exercise <- factor(c('l', 'n', 'n', 'i', 'l'), ordered = TRUE);exercise <- factor(c('l', 'n', 'n', 'i', 'l'), levels = c('n', 'l', 'i'), ordered = FALSE);exercise <- factor(c('l', 'n', 'n', 'i', 'l'), levels = c('n', 'l', 'i'), ordered = TRUE)
  CorrectAnswer: exercise <- factor(c('l', 'n', 'n', 'i', 'l'), levels = c('n', 'l', 'i'), ordered = TRUE)
  AnswerTests: omnitest(correctVal="exercise <- factor(c('l', 'n', 'n', 'i', 'l'), levels = c('n', 'l', 'i'), ordered = TRUE)")
  Hint: Check that the factor levels are ordered correctly.

- Class: text
  Output: "## Working with factors"

- Class: cmd_question
  Output: "The function `table()` tabulates observations and can be used to
    create bar plots quickly. Run `table()` on the data `Group` included with
    this lesson."
  CorrectAnswer: table(Group)
  AnswerTests: omnitest(correctExpr='table(Group)')
  Hint: Use the function table() on the variable Group.

- Class: cmd_question
  Output: "We can use the function `barplot()` to easily 
    display this table. Embed the previous code within
    a call to `barplot()`."
  CorrectAnswer: barplot(table(Group))
  AnswerTests: omnitest(correctExpr='barplot(table(Group))')
  Hint: Use the function table() on the variable Group, as above.
    Wrap this within barplot().

- Class: cmd_question
  Output: "Use the factor() command to modify the factor `Group` so that the control group is plotted last. 
    Assign this to a new variable, `Group_ord`."
  CorrectAnswer: Group_ord <- factor(Group, levels = c('Treatment1', 'Treatment2', 'Control'), ordered = TRUE) 
  AnswerTests: omnitest(correctExpr="Group_ord <- factor(Group, levels = c('Treatment1', 'Treatment2', 'Control'), ordered = TRUE)")
  Hint: This is a tricky one! Refer back to your answers  above. 

- Class: cmd_question
  Output: "Now, make a barplot of Group_ord."
  CorrectAnswer: barplot(table(Group_ord))
  AnswerTests: omnitest(correctExpr = 'barplot(table(Group_ord))')
  Hint: Make sure that you are nesting the new factor within table() within barplot().

- Class: text
  Output: "## Removing Levels from a Factor"

- Class: text
  Output: "Look at the factor `Gender`. Some of the Gender values in our dataset have been coded 
    incorrectly. Let’s remove some factors."

- Class: cmd_question
  Output: "First tabulate the factor, using `table()`."
  CorrectAnswer: table(Gender)
  AnswerTests: omnitest(correctExpr='table(Gender)')
  Hint: Use the function table() on the variable Gender.

- Class: text
  Output: "You can see that there are four levels here, when there should be only 
    two. Values should have been recorded as lowercase ‘m’ & ‘f’. We can easily correct this."

- Class: cmd_question
  Output: "We can use indexing (see Subsetting Vectors lesson, and Indexing lesson 
    in Unit 2) to select the wrongly-coded elements, and change them. Type: `Gender[Gender == 'M'] <- 'm'`.
    This code looks for all the elements 'M' and changes them to 'm'."
  CorrectAnswer: Gender[Gender == 'M'] <- 'm'
  AnswerTests: omnitest(correctExpr="Gender[Gender == 'M'] <- 'm'")
  Hint: Gender[Gender == 'M'] <- 'm'

- Class: cmd_question
  Output: "Let's plot some of the results of the experiment. Plot a boxplot
    of the variable `BloodPressure` as a function of the variable `Gender` that 
    we have just been working on. In this case, you need to construct a *formula: 
    put the continuous variable on the left, separated from the categorical variable
     by a tilde (~)."
  CorrectAnswer: boxplot(BloodPressure ~ Gender)
  AnswerTests: omnitest(correctExpr="boxplot(BloodPressure ~ Gender)")
  Hint: Use boxplot.... 

- Class: text
  Output: "What is wrong with this figure? It still shows the level `M`, even though we recoded 
     all the elements. This situation highlights the fact that R keeps the data as integers
     and the level labels separately. R still has the level `M` in its'memory."

- Class: cmd_question
  Output: "We can remove unused levels with the function `droplevels()`. 
    Try that on the Gender variable, reassigning the modified variable to your Gender variable."
  CorrectAnswer: Gender <- droplevels(Gender)
  AnswerTests: omnitest(correctExpr='Gender <- droplevels(Gender)')
  Hint: Use the function droplevels() on the variable Gender.Make sure to reassign this to the Gender variable.

- Class: cmd_question 
  Output: "Now, make another boxplot."
  CorrectAnswer: boxplot(BloodPressure ~ Gender)
  AnswerTests: omnitest(correctExpr="boxplot(BloodPressure ~ Gender)")
  Hint: Use boxplot.... 

- Class: text
  Output: "Hurrah! we successfully removed the unused level `M`."

- Class: text
  Output: "Nice work. Now you have some experience working with factors."


- Class: mult_question
  Output: Please submit the log of this lesson to Google Forms so
    that Simon may evaluate your progress.
  AnswerChoices: That would be lovely
  CorrectAnswer: That would be lovely
  AnswerTests: submit_log()
  Hint: hint
