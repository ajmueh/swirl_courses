- Class: meta
  Course: R Programming
  Lesson: Basic Building Blocks
  Author: Nick Carchedi, Simon A. Queenborough, Andrew Muehleisen
  Type: Standard
  Organization: Yale FES
  Version: 2.2.0


- Class: text
  Output: "# Getting Started with R"

- Class: text
  Output: In this lesson, we will explore some basic building blocks of the R programming
    language.

- Class: text
  Output: If at any point you'd like more information on a particular topic related
    to R, you can type `help.start()` at the prompt, which will open a menu of resources
    (either within RStudio or your default web browser, depending on your setup).
    Alternatively, a simple web search often yields the answer you're looking for.

- Class: text
  Output: "## How to use R as a calculator"

- Class: cmd_question
  Output: In its simplest form, R can be used as an interactive calculator. Type
    `5 + 7` and press Enter.
  CorrectAnswer: 5 + 7
  AnswerTests: omnitest(correctExpr='5 + 7')
  Hint: Type 5 + 7 and press Enter.

- Class: text
  Output: R simply prints the result of 12 by default. Let's try that again with some different numbers and operations.

- Class: cmd_question
  Output: As well as addition (+), we can do substraction. Type `5 - 7` and press Enter
  CorrectAnswer: 5 - 7
  AnswerTests: omnitest(correctExpr='5 - 7')
  Hint: Type 5 - 7 and press Enter.
  
- Class: cmd_question
  Output: What about division? Type `5 / 7` and press Enter
  CorrectAnswer: 5 / 7
  AnswerTests: omnitest(correctExpr='5 / 7')
  Hint: Type 5 / 7 and press Enter.
  
- Class: cmd_question
  Output: Or multiplication? There is no 'x' to indicate 'multiply by' as you probably learnt at school. 
          Instead, most computer languages use '*'. Type `5 * 7` and press Enter
  CorrectAnswer: 5 * 7
  AnswerTests: omnitest(correctExpr='5 * 7')
  Hint: Type 5 * 7 and press Enter.
  
- Class: cmd_question
  Output: We are not limited to two numbers ... we can use as many as you like. Type `8 + 2 - 10 / 43` and press Enter
  CorrectAnswer: 8 + 2 - 10 / 43 
  AnswerTests: omnitest(correctExpr='8 + 2 - 10 / 43 ')
  Hint: Type 8 + 2 - 10 / 43 and press Enter.
  
- Class: text
  Output: These operations follow the general laws of arithmetic 
          (e.g. multiplication and division first, followed by addition and subtraction).
  
- Class: text
  Output: "## How to assign variables and use R for algebra"
  
- Class: text
  Output: This arithmetic is all very useful, but only slighty easier than using a calculator!  However, R is a programming
    language and often the reason we use a programming language as opposed to a calculator
    is to automate some process or avoid unnecessary repetition.
    
- Class: text
  Output: In this case, we may want to use our result from above in a second calculation.
    Instead of retyping `5 + 7` every time we need it, we can just create a new variable
    that stores the result.

- Class: text
  Output: "The way you assign a value to a variable in R is by using the assignment
    operator, which is just a ''less than'' symbol followed by a ''minus'' sign. It
    looks like this: `<-`"

- Class: text
  Output: Think of the assignment operator as an arrow. You are assigning the value
    on the right side of the arrow to the variable name on the left side of the arrow.

- Class: cmd_question
  Output: To assign the result of `5 + 7` to a new variable called `x`, you type `x <-
    5 + 7`. This can be read as 'x gets 5 plus 7'. Give it a try now. What happened?!
  CorrectAnswer: x <- 5 + 7
  AnswerTests: any_of_exprs('x <- 5 + 7', 'x <- 7 + 5')
  Hint: Type x <- 5 + 7. It's important to include a single space on each side of
    the assignment operator, but do NOT put a space between the `<` and the `-` that
    form the arrow.

- Class: text
  Output: You'll notice that R did not print the result of 12 this time. When you
    use the assignment operator, R assumes that you don't want to see the result immediately,
    but rather that you intend to use the result for something else later on. R stores the variable x and its contents
    in the memory for this R session.

- Class: cmd_question
  Output: To view the contents of the variable `x`, just type `x` and press Enter. Try
    it now.
  CorrectAnswer: x
  AnswerTests: omnitest(correctExpr='x')
  Hint: Type x and press Enter. This will automatically print the value of x.
  
- Class: text
  Output: This ability to store variables, or objects, and their contents is very useful. It allows 
      us to pass these variables to other calculations, as well as store the output as a different variable. Note that 
      you can also check the value of your variables in your "global environment" window, normally in the upper right
      of your screen. 

- Class: cmd_question
  Output: Now, store the result of `x - 3` in a new variable called `y`.
  CorrectAnswer: y <- x - 3
  AnswerTests: omnitest(correctExpr='y <- x - 3')
  Hint: Type y <- x - 3 and press Enter. Whether you use x - 3 or x-3 is personal
    preference, but it's good habit to include a space on either side of the assignment
    operator.

- Class: cmd_question
  Output: What is the value of y? Type `y` to find out.
  CorrectAnswer: 'y'
  AnswerTests: omnitest(correctExpr='y')
  Hint: Type y and press Enter.
      
- Class: text
  Output: However, we don't always work with just numbers in R. For example, we can also work with characters that represent 
      text! Anything can be converted into a character in R by surrounding it with quotes, for example "text". 

- Class: cmd_question
  Output: Try re-assigning the variable `x` to the word 'hello'. 
  CorrectAnswer: x <- "hello"
  AnswerTests: omnitest(correctExpr='x <- "hello"')
  Hint: Remember that you need to surround your expression with " "

- Class: cmd_question
  Output: Lets look at the variable. Call your `x` variable now (i.e., type `x`). 
  CorrectAnswer: 'x'
  AnswerTests: omnitest(correctExpr='x')
  Hint: Type x and press Enter.
  
- Class: cmd_question
  Output: Isn't that nice. Now assign the variable `y` to the character "2". 
  CorrectAnswer: y <- "2"
  AnswerTests: omnitest(correctExpr='y <- "2"')
  Hint: To assign 2 as a character, we need to use quotation marks around it. 
  
- Class: cmd_question
  Output: Lets check what type of variable y is. We can do with the useful `class()` function. Enter `class(y)`.
  CorrectAnswer: class(y)
  AnswerTests: omnitest(correctExpr='class(y)')
  Hint: 
  
- Class: text
  Output: "This function is telling you that y is a character, not a number. This is the result of our quotation marks! If 
  you tried to perform a mathematical operation on y, like + or -, R would give an error. You must be careful with your variable
  types in R---characters don't play well with numbers for example, and there are other more subtle situations we'll get to 
  where this can be problematic."
  
- Class: text
  Output: "You have now learned how to do basic operations in R, assign variables, and learned the difference between two 
  common variable types. You are on your way to becoming an R wizard!"

- Class: mult_question
  Output: Please submit the log of this lesson to Google Forms so
    that Simon may evaluate your progress.
  AnswerChoices: Sure, no problem
  CorrectAnswer: Sure, no problem
  AnswerTests: submit_log()
  Hint: hint
